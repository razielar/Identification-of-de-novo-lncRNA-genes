### Step 1: Mapping specifying the number of threads, input function, add parameters & logs

configfile: "config.yaml"

rule all: 
	input:
		"plots/quals.svg"

rule bwa_map: 
	input:
		"data/genome.fa",
		lambda wildcards: config["samples"][wildcards.sample] #wildcards object allowd to access the wildcards values
	output:
		temp("mapped_reads/{sample}.bam") #temporal file
	params: 
		rg=r"@RG\tID:{sample}\tSM:{sample}"
	log:
		"logs/bwa_mem/{sample}.log"
	threads: 8
	shell:
		"(bwa mem -R '{params.rg}' -t {threads} {input} | samtools view -Sb -> {output}) 2> {log}" #'()' to send the STDERR of bwa and samtools to logs

rule samtools_sort: 
	input:
		"mapped_reads/{sample}.bam"
	output:
		protected("sorted_reads/{sample}.bam") #protect this file 
	shell:
		"samtools sort -T sorted_reads/{wildcards.sample} -O bam {input} > {output}"

rule samtools_index: 
	input:
		"sorted_reads/{sample}.bam"
	output:
		"sorted_reads/{sample}.bam.bai"
	shell:
		"samtools index {input}"

rule bcftools_call: 
	input: 
		fa="data/genome.fa",
		bam=expand("sorted_reads/{sample}.bam", sample=config["samples"]),
		bai=expand("sorted_reads/{sample}.bam.bai", sample=config["samples"])
	output:
		"calls/all.vcf"
	shell: 
		"samtools mpileup -g -f {input.fa} {input.bam} | bcftools call -mv - > {output}"

rule plot_quals: 
	input: 
		"calls/all.vcf"
	output: 
		"plots/quals.svg"
	script: 
		"scripts/plot-quals.py"

